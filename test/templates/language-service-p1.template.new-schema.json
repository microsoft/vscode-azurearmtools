/*
    P1s - GA
    ETA for Release - September

    0. features parity with current extension (i.e. recongizing unused params)
    1. function signature intellisense
        a. including UDFs
        b. hopefully things like resourceId and reference function can be contextual
    2. intellisense for language constructs like copy loop
        a. are there others? or is copy the only/main one?
    3. portal and SDKs can deploy this new template
    4. Expression evaluation using parameter file --> need to think this through more
    - need "full" ARM validation for this
        * mini-F5 to evaluate only with defaultValues?
    - [OPEN QUESTION] will there be value in validation with round-trip to Azure?
*/
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dnsLabelPrefix": {
      "type": "String",
      "metadata": {
        "description": "Unique DNS Name for the Storage Account where the Virtual Machine's disks will be placed."
      }
    },
    "adminUsername": {
      "type": "String",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "vmSize": {
      "type": "String",
      "defaultValue": "Standard_D1",
      "metadata": {
        "description": "VM size"
      }
    },
    "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": "14.04.2-LTS",
      "allowedValues": [
        "12.04.5-LTS",
        "14.04.2-LTS",
        "15.10"
      ],
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values: 12.04.5-LTS, 14.04.2-LTS, 15.10."
      }
    },
    "location": {
      "type": "String",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "publicIpNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Determines whether or not a new public ip should be provisioned."
      }
    },
    "unusedParameter": { // this is caught by the extension today, noting for feature parity - ajf
      "type": "string"
    },
    "publicIpAddressName": {
      "type": "string",
      "defaultValue": "[concat(resourceGroup().name, '-pip')]"
    }
  },
  "variables": {
    "storageAccountName": "[concat('sacustmdata', uniquestring(resourceGroup().id))]",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "nicName": "networkInterface1",
    "vmName": "vm1",
    "virtualNetworkName": "virtualNetwork1",
    "publicIPAddressName": "publicIp1",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "Subnet-1",
    "subnet1Prefix": "10.0.0.0/24",
    "publicIPAddressType": "Dynamic",
    "storageAccountType": "Standard_LRS",
    "publicIpAddressId": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts", //bmoore - for demo, sort the properties on the top level resource type, apiVersion, name, location, sku
      "name": "[variables('storageAccountName')]", // the false positive on the length is a P0, interestingly this didn't show up for api version 2015-06-15
      // the comment is a DEMO
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]", // Need to sync with Steve on what is possible for syntax highlighting here
      // for demo, I would expect the use of expressions ([]) to at least be highlighted
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "condition": "[equals(parameters('publicIpNewOrExisting'), 'new')]",
      "apiVersion": "2018-12-01", //update the apiVersions to a later one (that we have schemas for :))
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "DNSSettings": {
          "domainNameLabel": "[parameters('dnsLabelPrefix')]"
        }
      }
    },
    { // DEMO REQUIREMENT - case insensitivity - the Name property of the vnet is capitalized
      "apiVersion": "2018-12-01", // JUST A BUG: for some reason, this shows up when the subnet Name property is capitalized
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]", //bmoore - use a property in the properties object instead of one of the top level ones
      "location": "[parameters('location')]",
      "properties": {
        "AddressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "Name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-12-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('publicIPAddressName')]",
        "[variables('virtualNetworkName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "Name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[if(not(equals(parameters('publicIpNewOrExisting'), 'none')), variables('publicIpAddressId') , json('null'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnet1Name'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-10-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('storageAccountName')]",
        "[variables('nicName')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUserName": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64('
          #cloud-config
          package_upgrade: true
          packages: -
          nginx -
          nodejs -
          npm ')
  ]
  "
}, "storageProfile": {
  "imageReference": {
    "publisher": "[variables('imagePublisher')]",
    "offer": "[variables('imageOffer')]",
    "sku": "[parameters('ubuntuOSVersion')]",
    "version": "latest"
  },
  "osDisk": {
    "createOption": "fromImage" // schema expects "FromImage" (title case)
  }
}, "networkProfile": {
  "networkInterfaces": [
    {
      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
    }
  ]
}, "diagnosticsProfile": {
  "bootDiagnostics": {
    "enabled": true, // CHANGED to boolean
    // open question on whether multi-line would work here, but I would expect it to. Maybe not for a demo, but a P0
    // this seems more main-line than what the above cloud-init scenario or functions
    "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob]" // this line uses both reference and resource id
    // flagging this to check intellisenes on arm complex functions
  }
} } } ], "outputs": {
  "ssh-command": {
    "type": "string",
    // demo requirement/P0 - multi-line where newlines are important for code execution
    "value": "[if(equals(parameters('publicIpNewOrExisting'), 'none'),
    'no public ip',
    concat('ssh ',
    parameters('adminUsername'),
    '@',
    reference(resourceId('Microsoft.Network/publicIPAddresses',
    parameters('publicIpAddressName')),
    '2018-04-01').dnsSettings.fqdn)) ]
    "
  }
} }
