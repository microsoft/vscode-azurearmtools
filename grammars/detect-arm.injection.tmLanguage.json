{
    "version": "https://github.com/Microsoft/vscode-JSON.tmLanguage/commit/9bd83f1c252b375e957203f21793316203f61f70",
    "name": "Injection of ARM detection into JSON/JSONC",
    "$comment0": "==================================================================================================",
    "$comment1": "This grammar inserts rules into the JSON and JSONC grammars that automatically switch to",
    "$comment2": "  the source.json.arm grammar if they detect a valid ARM deployment schema",
    "$commentZ": "==================================================================================================",
    "scopeName": "detect-arm.injection.json.comments",
    "injectionSelector": "L:meta.structure.dictionary.json, L:meta.structure.dictionary.json.comments",
    "patterns": [
        {
            "$comment": "========================== START OF MODIFICATION: ADDED ==========================",
            "$comment2": "Inside of a dictionary, if the key+value are a valid ARM deployment schema, then switch to",
            "$comment3": "  the ARM grammar for property values for the rest of the file",
            "$comment4": "=================================================================================",
            "name": "meta.arm-deployment-template.json.comments",
            "begin": "(?x) \\s* (?<key>(\")\\$schema(\")) (?<colon>:) (?<value> \\s*(\")https?:\\/\\/schema.management.azure.com\\/schemas\\/[^\"\\/]+\\/(?:deploymentTemplate|subscriptionDeploymentTemplate)\\.json\\#?(\") )\\s* (,)",
            "end": "$no-end-we-want-scope-to-continue-to-end-of-file",
            "$beginCapturesComment": "Colorize the schema key/value the same as normal key/value pairs",
            "beginCaptures": {
                "1": {
                    "$comment": "$schema",
                    "name": "support.type.property-name"
                },
                "2": {
                    "$comment": "begin quote",
                    "name": "punctuation.support.type.property-name.begin.json.comments"
                },
                "3": {
                    "$comment": "end quote",
                    "name": "punctuation.support.type.property-name.end.json.comments"
                },
                "4": {
                    "$comment": "colon",
                    "name": "punctuation.separator.dictionary.key-value.json.comments"
                },
                "5": {
                    "$comment": "quoted string value",
                    "name": "string.quoted.double.json.comments"
                },
                "6": {
                    "$comment": "quote begin",
                    "name": "punctuation.definition.string.begin.json.arm"
                },
                "7": {
                    "$comment": "quote end",
                    "name": "punctuation.definition.string.end.json.arm"
                },
                "8": {
                    "$comment": "comma",
                    "name": "punctuation.separator.dictionary.pair.json.comments"
                }
            },
            "patterns": [
                {
                    "comment": "the JSON object key",
                    "include": "#objectkey"
                },
                {
                    "include": "#comments"
                },
                {
                    "begin": ":",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.separator.dictionary.key-value.json.comments"
                        }
                    },
                    "end": "(,)|(?=\\})",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.separator.dictionary.pair.json.comments"
                        }
                    },
                    "name": "meta.structure.dictionary.value.json.comments",
                    "patterns": [
                        {
                            "$comment1": "Whenever we hit a dictionary value after finding a template schema, look",
                            "$comment2": "for values that can include template language expressions inside strings",
                            "include": "source.json.arm"
                        }
                    ]
                }
            ],
            "$commentEnd": "========================== END OF MODIFICATION =========================="
        }
    ],
    "$repositoryComment": "These are copied from the JSONC grammar",
    "repository": {
        "array": {
            "begin": "\\[",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.array.begin.json.comments"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.array.end.json.comments"
                }
            },
            "name": "meta.structure.array.json.comments",
            "patterns": [
                {
                    "include": "#value"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.array.json.comments"
                },
                {
                    "match": "[^\\s\\]]",
                    "name": "invalid.illegal.expected-array-separator.json.comments"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*\\*(?!/)",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.json.comments"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.documentation.json.comments"
                },
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.json.comments"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.json.comments"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.json.comments"
                        }
                    },
                    "match": "(//).*$\\n?",
                    "name": "comment.line.double-slash.js"
                }
            ]
        },
        "constant": {
            "match": "\\b(?:true|false|null)\\b",
            "name": "constant.language.json.comments"
        },
        "number": {
            "match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
            "name": "constant.numeric.json.comments"
        },
        "object": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.dictionary.begin.json.comments"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.dictionary.end.json.comments"
                }
            },
            "name": "meta.structure.dictionary.json.comments",
            "patterns": [
                {
                    "comment": "the JSON object key",
                    "include": "#objectkey"
                },
                {
                    "include": "#comments"
                },
                {
                    "begin": ":",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.separator.dictionary.key-value.json.comments"
                        }
                    },
                    "end": "(,)|(?=\\})",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.separator.dictionary.pair.json.comments"
                        }
                    },
                    "name": "meta.structure.dictionary.value.json.comments",
                    "patterns": [
                        {
                            "comment": "the JSON object value",
                            "include": "#value"
                        },
                        {
                            "match": "[^\\s,]",
                            "name": "invalid.illegal.expected-dictionary-separator.json.comments"
                        }
                    ]
                },
                {
                    "match": "[^\\s\\}]",
                    "name": "invalid.illegal.expected-dictionary-separator.json.comments"
                }
            ]
        },
        "string": {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.json.comments"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.json.comments"
                }
            },
            "name": "string.quoted.double.json.comments",
            "patterns": [
                {
                    "include": "#stringcontent"
                }
            ]
        },
        "objectkey": {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.support.type.property-name.begin.json.comments"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.support.type.property-name.end.json.comments"
                }
            },
            "name": "string.json.comments support.type.property-name.json.comments",
            "patterns": [
                {
                    "include": "#stringcontent"
                }
            ]
        },
        "stringcontent": {
            "patterns": [
                {
                    "match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
                    "name": "constant.character.escape.json.comments"
                },
                {
                    "match": "\\\\.",
                    "name": "invalid.illegal.unrecognized-string-escape.json.comments"
                }
            ]
        },
        "value": {
            "patterns": [
                {
                    "include": "#constant"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#array"
                },
                {
                    "include": "#object"
                },
                {
                    "include": "#comments"
                }
            ]
        }
    }
}
